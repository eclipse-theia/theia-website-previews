{"componentChunkName":"component---src-templates-doc-js","path":"/docs/preferences","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Preferences"},"html":"<h1 id=\"preferences\" style=\"position:relative;\"><a href=\"#preferences\" aria-label=\"preferences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preferences</h1>\n<p>Theia has a preference service which allows modules to get preference values, contribute default preferences and listen for preference changes.</p>\n<p>Preferences can be saved in the root of the workspace under <code class=\"language-text\">.theia/settings.json</code> or under <code class=\"language-text\">$HOME/.theia/settings.json</code> on Linux systems. For Windows systems, the user settings will by default be in the <code class=\"language-text\">%USERPROFILE%/.theia/settings.json</code> (something like <code class=\"language-text\">C:\\Users\\epatpol\\.theia/settings.json</code>)</p>\n<p>As of right now the files must contain a valid a JSON containing the names and values of preferences (note that the following preference names are not official and only used as an example). You can also add comments to the settings.json file if needed i.e.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    // Enable/Disable the line numbers in the monaco editor\n\t&quot;monaco.lineNumbers&quot;: &quot;off&quot;,\n    // Tab width in the editor\n\t&quot;monaco.tabWidth&quot;: 4,\n\t&quot;fs.watcherExcludes&quot;: &quot;path/to/file&quot;\n}</code></pre></div>\n<p>Let's take the filesystem as an example of a module using the preference service</p>\n<h2 id=\"contributing-default-preferences-as-a-module-with-inversify\" style=\"position:relative;\"><a href=\"#contributing-default-preferences-as-a-module-with-inversify\" aria-label=\"contributing default preferences as a module with inversify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contributing default preferences as a module with inversify</h2>\n<p>To contribute some preference values. A module must contribute a valid json schema that will be used to validate the preferences. A module must bind the following PreferenceContribution to a value like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PreferenceSchema</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span>\n    properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> object\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PreferenceContribution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> schema<span class=\"token operator\">:</span> PreferenceSchema<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For instance, the filesystem binds it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> filesystemPreferenceSchema<span class=\"token operator\">:</span> PreferenceSchema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"files.watcherExclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"List of paths to exclude from the filesystem watcher\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"additionalProperties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"boolean\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>PreferenceContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toConstantValue</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">{</span>\n    schema<span class=\"token operator\">:</span> filesystemPreferenceSchema\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here are some useful links for contributing a validation schema:</p>\n<ul>\n<li><a href=\"http://json-schema.org/documentation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON schema spec</a></li>\n<li><a href=\"https://jsonlint.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Online JSON validator</a></li>\n<li><a href=\"http://www.jsonschemavalidator.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Online JSON schema validator</a></li>\n</ul>\n<h2 id=\"listening-for-a-preference-change-via-a-configuration\" style=\"position:relative;\"><a href=\"#listening-for-a-preference-change-via-a-configuration\" aria-label=\"listening for a preference change via a configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Listening for a preference change via a configuration</h2>\n<p>To use the value of a preference, simply get the injected PreferenceService from the container</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> preferences <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>PreferenceService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the case of the filesystem, the service is fetched at the beginning for the bindings. There, you can use the onPreferenceChanged method to register a pref changed callback.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>PreferenceService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> prefService<span class=\"token operator\">:</span> PreferenceService\n\tprefService<span class=\"token punctuation\">.</span><span class=\"token function\">onPreferenceChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> callback <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Where the event received <code class=\"language-text\">e</code> is like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PreferenceChangedEvent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> preferenceName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> newValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> oldValue<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although this can be used directly in the needed class, the filesystem provides a proxy preference service specific to the filesystem preferences (which uses the preference service in the background). This allows for faster and more efficient searching for the preference (as it searches for the preference in the filesystem preference service, and not on all preferences via the more generic preference service). It's also more efficient in the sense that only the modules watching for specific preferences related to a module will be notified. To do so, there is a proxy interface for the filesystem configuration that is bound like so using the preference proxy interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> PreferenceProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> Disposable <span class=\"token operator\">&amp;</span> PreferenceEventEmitter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> createPreferenceProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Configuration</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>preferences<span class=\"token operator\">:</span> PreferenceService<span class=\"token punctuation\">,</span> configuration<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PreferenceProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Register a client to the preference server\n    When a preference is received, it is validated against the schema and then fired if valid, otherwise the default value is provided.\n\n    This proxy is also in charge of calling the configured preference service when the proxy object is called i.e editorPrefs['preferenceName']\n\n    It basically forwards methods to the real object, i.e dispose/ready etc.\n}</span></code></pre></div>\n<p>To use that proxy, simply bind it to a new type X = PreferenceProxy&#x3C;CONFIGURATION_INTERFACE> and then bind(X) to a proxy using the method above.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FileSystemConfiguration</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'files.watcherExclude'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>globPattern<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> FileSystemPreferences <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FileSystemPreferences'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> FileSystemPreferences <span class=\"token operator\">=</span> PreferenceProxy<span class=\"token operator\">&lt;</span>FileSystemConfiguration<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createFileSystemPreferences</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">preferences<span class=\"token operator\">:</span> PreferenceService</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FileSystemPreferences <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createPreferenceProxy</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">,</span> defaultFileSystemConfiguration<span class=\"token punctuation\">,</span> filesystemPreferenceSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bindFileSystemPreferences</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind<span class=\"token operator\">:</span> interfaces<span class=\"token punctuation\">.</span>Bind</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>FileSystemPreferences<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> preferences <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>PreferenceService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">createFileSystemPreferences</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>PreferenceContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toConstantValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> schema<span class=\"token operator\">:</span> filesystemPreferenceSchema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, to use the filesystem configuration in your module. Simply inject it where you need it. You can then access the preference like so (filesystem example) :</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> patterns <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preferences<span class=\"token punctuation\">[</span><span class=\"token string\">'files.watcherExclude'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and you can also register for preference change like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toDispose<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">.</span><span class=\"token function\">onPreferenceChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>preferenceName <span class=\"token operator\">===</span> <span class=\"token string\">'files.watcherExclude'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toRestartAll<span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n        @<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>FileSystemPreferences<span class=\"token punctuation\">)</span> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> preferences<span class=\"token operator\">:</span> FileSystemPreferences</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toDispose<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">.</span><span class=\"token function\">onPreferenceChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>preferenceName <span class=\"token operator\">===</span> <span class=\"token string\">'files.watcherExclude'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toRestartAll<span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"preference-flow-when-modifying-a-preference\" style=\"position:relative;\"><a href=\"#preference-flow-when-modifying-a-preference\" aria-label=\"preference flow when modifying a preference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preference flow when modifying a preference</h2>\n<p>As of right now, when a settings.json is modified either in the ${workspace}/.theia/ or in the <code class=\"language-text\">os.homedir()</code>/.theia/, this will trigger an event from the JSON preference server. Currently, there's a CompoundPreferenceServer that manages the different servers (scopes) like workspace/user/defaults (provided via the contributions above). Next, the PreferenceService manages this server and adds a more convenient API on top of it (i.e. getBoolean, getString etc.). It also allows clients to registers for preference changes. This PreferenceService can then be used either directly via injection in the modules, or via a more specific proxy (like the filesystem configuration from above).</p>\n<p>In the case of the preference file being modified, the flow would then be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.theia/settings.json -&gt; JsonPreferenceServer -&gt; CompoundPreferenceServer -&gt; PreferenceService -&gt; PreferenceProxy&lt;FileSystemConfiguration&gt; -&gt; FileSystemWatcher</code></pre></div>\n<h2 id=\"fetching-the-value-of-a-preference\" style=\"position:relative;\"><a href=\"#fetching-the-value-of-a-preference\" aria-label=\"fetching the value of a preference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetching the value of a preference</h2>\n<p>In the case of the filesystem, one would use the same proxied config as above to access the preferences.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefService<span class=\"token punctuation\">[</span><span class=\"token string\">'preferenceName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefService<span class=\"token punctuation\">[</span><span class=\"token string\">'preferenceName2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This works because, as we have seen it above, the proxy will simply call prefService.get('preferenceName').</p>\n<h2 id=\"todofixme-for-preferences\" style=\"position:relative;\"><a href=\"#todofixme-for-preferences\" aria-label=\"todofixme for preferences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TODO/FIXME for preferences</h2>\n<ul>\n<li>Add scopes with server priority in CompoundPreferenceServer</li>\n<li>Add autocomplete/description when modifying the settings.json from within theia</li>\n</ul>","fields":{"slug":"preferences"}}},"pageContext":{"slug":"preferences"}}}