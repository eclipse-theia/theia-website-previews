{"componentChunkName":"component---src-templates-doc-js","path":"/docs/tasks","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Tasks"},"html":"<h1 id=\"tasks\" style=\"position:relative;\"><a href=\"#tasks\" aria-label=\"tasks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tasks</h1>\n<p>Eclipse Theia users can execute tasks to automate certain steps in their workflow.\nTasks can be invoked via the main menu <em>Terminal</em> or via the command palette.\nEvery task is defined by a task configuration, which specifies among other properties the task type, a label, optionally a description, whether it is a background task or not, whether it is a build or test task, its dependencies to other tasks, etc.\nTasks in Eclipse Theia are structurally compatible with Visual Studio Code tasks.\nSimilar to <a href=\"https://code.visualstudio.com/docs/editor/tasks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code</a>, users can define tasks in a file named <code class=\"language-text\">tasks.json</code> file in the workspace or on user level.</p>\n<h2 id=\"taskproviders-taskresolvers-and-taskrunners\" style=\"position:relative;\"><a href=\"#taskproviders-taskresolvers-and-taskrunners\" aria-label=\"taskproviders taskresolvers and taskrunners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TaskProviders, TaskResolvers and TaskRunners</h2>\n<p>In Eclipse Theia, tasks can also be provided from and executed by custom Theia extensions.\nIn particular, Theia offers the three main contribution points for tasks: <code class=\"language-text\">TaskProvider</code>, <code class=\"language-text\">TaskResolver</code> and <code class=\"language-text\">TaskRunner</code>.\nTo better understand the purpose of those, let’s look at the flow, through the involved components, when a user selects and executes a task in the following figure.</p>\n<img src=\"../../tasks.png\" alt=\"Task flow overview\" style=\"max-width: 915px\">\n<p>Besides the user-defined task configurations, Eclipse Theia will also offer its users all task configurations collected from the registered task providers.\nWhen a user selects one of the provided task configurations and executes it, the configuration will be handed over to the task service, which will first resolve the selected task configuration using a resolver that is registered for the selected task configuration’s type.\nA task resolver can manipulate the task configuration before it is actually executed.\nThis is useful for, e.g., filling in default values and resolving custom variables in a task configuration.\nOnce the configuration is resolved, the task service requests the execution of the resolved task configuration on the task server, which runs on the backend.\nTo actually perform the resolved task configuration, the task server looks up the task runner registered for the configuration’s type.\nFinally, the task runner is responsible for actually performing the task according to the specified task configuration.</p>\n<p>Theia provides dedicated contribution points for task providers, task resolvers, and task runners.\nThus, Theia extensions can extend the list of available tasks with custom task types, handle the resolution of task configurations of custom task types, as well as implement their execution.</p>\n<h2 id=\"example-task-providers-and-task-resolvers\" style=\"position:relative;\"><a href=\"#example-task-providers-and-task-resolvers\" aria-label=\"example task providers and task resolvers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Task Providers and Task Resolvers</h2>\n<p>In the following example, we will contribute a custom task provider, which provides a custom task.\nFurther, we will add a custom task resolver that will enhance the task configuration before execution.\nFinally, we will contribute a custom task runner that executes our provided task.</p>\n<p>Task providers and task resolvers are contributed via an implementation of <code class=\"language-text\">TaskContribution</code>.\nLike all contributions, it must be bound in the respective front end module as shown below.\nIf you are not yet familiar with contribution points in Theia or the use of dependency injection, please consider this guide on <a href=\"/theia-website-previews/pr-previews/pr-549/docs/services_and_contributions/\">Services and Contributions</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>TaskContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>MyTaskContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Our <code class=\"language-text\">TaskContribution</code> contributes a task provider and a task resolver (see following listing). Their implementation is shown below. By specifying a task type along with the registration, Theia will pick the right resolver and runner for our custom task type (<code class=\"language-text\">myTaskType</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskContribution</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token function\">registerProviders</span><span class=\"token punctuation\">(</span>providers<span class=\"token operator\">:</span> TaskProviderRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       providers<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTaskProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token function\">registerResolvers</span><span class=\"token punctuation\">(</span>resolvers<span class=\"token operator\">:</span> TaskResolverRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       resolvers<span class=\"token punctuation\">.</span><span class=\"token function\">registerTaskResolver</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTaskResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our example task provider contributes exactly one task:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskProvider</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">async</span> <span class=\"token function\">provideTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>TaskConfiguration<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n           label<span class=\"token operator\">:</span> <span class=\"token string\">'My Custom Task'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span>\n           _scope<span class=\"token operator\">:</span> <span class=\"token string\">'MyTaskProvider'</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our example task resolver always sets property <code class=\"language-text\">myCustomValue</code> to the static value <code class=\"language-text\">42</code>.\nIn a real scenario, it would check whether it is set in the specified <code class=\"language-text\">taskConfig</code> and only add it if it is not set. Or it would resolve variables specified in the <code class=\"language-text\">taskConfig</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskResolver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">resolveTask</span><span class=\"token punctuation\">(</span>taskConfig<span class=\"token operator\">:</span> TaskConfiguration<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>TaskConfiguration<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>taskConfig<span class=\"token punctuation\">,</span> myCustomValue<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"example-task-runners\" style=\"position:relative;\"><a href=\"#example-task-runners\" aria-label=\"example task runners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Task Runners</h2>\n<p>Task runners are contributed via a <code class=\"language-text\">TaskRunnerContribution</code>. As we use dependency injection to create the actual task runner, we bind the contribution and the task runner itself in our module:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MyTaskRunner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>TaskRunnerContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>MyTaskRunnerContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In our <code class=\"language-text\">TaskRunnerContribution</code>, we register an instance of our custom task runner at the <code class=\"language-text\">TaskRunnerRegistry</code> along with the task type our runner is responsible for.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskRunnerContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskRunnerContribution</span> <span class=\"token punctuation\">{</span>\n\n   @<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>MyTaskRunner<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> myTaskRunner<span class=\"token operator\">:</span> MyTaskRunner<span class=\"token punctuation\">;</span>\n\n   <span class=\"token function\">registerRunner</span><span class=\"token punctuation\">(</span>runners<span class=\"token operator\">:</span> TaskRunnerRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       runners<span class=\"token punctuation\">.</span><span class=\"token function\">registerRunner</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myTaskRunner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Task runners need to implement the interface <code class=\"language-text\">TaskRunner</code>.\nThe function <code class=\"language-text\">run</code> receives the <code class=\"language-text\">TaskConfiguration</code> when a task is triggered and is responsible for actually running the operation.\nIn our example, we instantiate a custom implementation of <code class=\"language-text\">Task</code> called <code class=\"language-text\">MyTask</code> and execute it with the current configuration.\nUsing the existing interface <code class=\"language-text\">Task</code> allows us to connect the task to the <code class=\"language-text\">TaskManager</code> which will show visual feedback in the workbench during tasks execution (see screenshot below).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskRunner</span> <span class=\"token punctuation\">{</span>\n\n   @<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>TaskManager<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> taskManager<span class=\"token operator\">:</span> TaskManager<span class=\"token punctuation\">;</span>\n\n   @<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>ILogger<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> logger<span class=\"token operator\">:</span> ILogger<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> TaskConfiguration<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">const</span> myTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskManager<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">,</span>\n                                   <span class=\"token punctuation\">{</span> config<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'My Custom Task'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       myTask<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>myCustomValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> myTask<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, our custom task configuration will wait for 5000 ms and then print out the custom value we have added in our task resolver before:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myCustomValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Start running custom task: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myCustomValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Finished running custom task: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myCustomValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fireTaskExited</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> taskId<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskId<span class=\"token punctuation\">,</span> code<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see in the screenshot below, our custom task is running for 5000 ms (as we set a timeout in <code class=\"language-text\">MyTask</code>) and then it stops.</p>\n<img src=\"../../running-custom-task.gif\" alt=\"Running custom task\" style=\"max-width: 702px\">\n<p>As can be seen in the console output, the task starts and finishes 5000 ms later, and prints the custom variable that has been added by the custom resolver.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root INFO Start running custom task: 42\nroot INFO Finished running custom task: 42</code></pre></div>\n<h2 id=\"task-definitions\" style=\"position:relative;\"><a href=\"#task-definitions\" aria-label=\"task definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Task Definitions</h2>\n<p>Extensions can also omit contributing a task provider, but only contribute a runner (and optionally a resolver).\nAs a consequence, those custom tasks are not provided automatically to users, but users can still configure tasks based on these custom task types in their <code class=\"language-text\">tasks.json</code> file.\nTo support users in the creation of such user-defined task configurations for custom task types, Theia provides a dedicated contribution point for <em>task definitions</em>.\nA task definition essentially specifies a JSON schema defining the properties that can or need to be specified for a task of a certain custom type.</p>","fields":{"slug":"tasks"}}},"pageContext":{"slug":"tasks"}}}