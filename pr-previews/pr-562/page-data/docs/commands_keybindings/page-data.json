{"componentChunkName":"component---src-templates-doc-js","path":"/docs/commands_keybindings","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Commands/Menus/Keybindings"},"html":"<h1 id=\"commands-menus-and-keybindings\" style=\"position:relative;\"><a href=\"#commands-menus-and-keybindings\" aria-label=\"commands menus and keybindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commands, Menus and Keybindings</h1>\n<p>Commands are runnable actions defined by an ID and the function to be executed (plus some optional parameters like a name or an icon). Commands can be triggered via the command palette, they can be bound to keybindings or menu items, and they can be called programmatically. The action that commands trigger can be context-sensitive, so that they can only be called under certain conditions (window focus, current selection etc.).</p>\n<p>The following sections provide details about how to contribute commands, keybindings and menu items. The sections will describe how to connect the different contributions and how to use the corresponding services for managing these items.</p>\n<p>If you are not yet familiar with contribution points in Theia or the use of dependency injection, please consider this guide on <a href=\"/theia-website-previews/pr-previews/pr-562/docs/services_and_contributions/\">Services and Contributions</a>.</p>\n<p>All the following code examples are from the <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia extension generator</a>. You can get the same code set-up by installing the generator, selecting the “Hello World” example (see here) and choosing “helloworld” as the name.</p>\n<h2 id=\"contributing-commands\" style=\"position:relative;\"><a href=\"#contributing-commands\" aria-label=\"contributing commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contributing Commands</h2>\n<p>By contributing a command, you can add a custom action to Theia. A command can be triggered by the user via the command palette, a keybinding or a menu entry. It can also be called programmatically.</p>\n<p>All commands of a Theia application are managed in the <code class=\"language-text\">CommandRegistry</code>. To contribute commands to the command registry, modules must implement the <code class=\"language-text\">CommandContribution</code> interface (see code example below).</p>\n<p>A command is an object with an <code class=\"language-text\">id</code> and an optional, potentially user visible <code class=\"language-text\">label</code> (see HelloworldCommand in the example below). The command contribution receives the <code class=\"language-text\">CommandRegistry</code> in the <code class=\"language-text\">registerCommands</code> function as a parameter. The command can then be registered by calling <code class=\"language-text\">registerCommand</code> on this registry. Along with the command a callback needs to be provided which is executed whenever the command is triggered (<code class=\"language-text\">CommandHandler</code>). In the example, the command uses the MessageService to “say hello”.</p>\n<p><strong>helloworld-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> HelloworldCommand<span class=\"token operator\">:</span> Command <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   id<span class=\"token operator\">:</span> <span class=\"token string\">'Helloworld.command'</span><span class=\"token punctuation\">,</span>\n   label<span class=\"token operator\">:</span> <span class=\"token string\">\"Say Hello\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloworldCommandContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandContribution</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n       <span class=\"token parameter\">@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>MessageService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> messageService<span class=\"token operator\">:</span> MessageService<span class=\"token punctuation\">,</span></span>\n   <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n   <span class=\"token function\">registerCommands</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> CommandRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerCommand</span><span class=\"token punctuation\">(</span>HelloworldCommand<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function-variable function\">execute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To make the command execution context-sensitive, the <code class=\"language-text\">CommandHandler</code> can optionally implement <code class=\"language-text\">isEnabled</code> and <code class=\"language-text\">isVisible</code>. You can optionally register more than one <code class=\"language-text\">CommandHandler</code> and let the command execute one of them based on the current context. To register additional handlers for a command use the <code class=\"language-text\">registerHandler</code> function on the <code class=\"language-text\">CommandRegistry</code>\nWhen a command is executed, the command registry checks all registered handlers. The first handler that returns true on <code class=\"language-text\">isEnabled</code> will be considered to be active, and it will be executed. Only one handler should be active (<code class=\"language-text\">isEnabled === true</code>) at the same time, though. <code class=\"language-text\">isVisible</code> controls the visibility of menu items and tool items that are connected to a command, as well as whether the command is shown in the command palette.  If the active handler returns true, the menu item will be visible and vice versa.\nFinally, by implementing <code class=\"language-text\">isToggle</code> a handler can optionally specify, whether menu items connected to the commands should be toggled on or off.</p>\n<h3 id=\"binding-the-contribution-to-commandcontribution\" style=\"position:relative;\"><a href=\"#binding-the-contribution-to-commandcontribution\" aria-label=\"binding the contribution to commandcontribution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binding the contribution to CommandContribution</h3>\n<p>To make our <code class=\"language-text\">CommandContribution</code> accessible to Theia, we need to bind the custom <code class=\"language-text\">HelloworldCommandContribution</code> to the respective contribution symbol <code class=\"language-text\">CommandContribution</code>. This is done in the <code class=\"language-text\">helloworld-frontend-module</code>, for more details see <a href=\"/theia-website-previews/pr-previews/pr-562/docs/services_and_contributions/\">Services and Contributions</a>.</p>\n<p><strong>helloworld-frontend-module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// add your contribution bindings here</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>CommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloworldCommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">CommandRegistry</code> used to register our contributed command above, also provides an API to interact with commands. As an example, you can programmatically execute commands, you can browse through all registered commands or you can access a list of recently executed commands. Please refer to the <a href=\"https://eclipse-theia.github.io/theia/docs/next/classes/core.commandregistry-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeDoc for the CommandRegistry</a> for more details. To use the <code class=\"language-text\">CommandRegistry</code> outside of a contribution, you can access it via dependency injection.</p>\n<p>In the following sections, we describe how to bind commands to menu items and keybindings.</p>\n<h2 id=\"contributing-menu-items\" style=\"position:relative;\"><a href=\"#contributing-menu-items\" aria-label=\"contributing menu items permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contributing Menu Items</h2>\n<p>Theia allows you to contribute menu items that will be displayed in specific menus within your Theia application. Menu items are bound to commands and therefore allow the user to trigger actions (please see the section about commands above).</p>\n<p>All the following code examples are from the <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia extension generator</a>. You can get the same code set-up by installing the generator, selecting the “Hello World” example (see <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>) and choosing “helloworld” as the name.</p>\n<p>All menu items of a Theia application are managed in the <code class=\"language-text\">MenuModelRegistry</code>. To contribute menu items to the registry, modules must implement the ´MenuContribution´ interface (see code example below).</p>\n<p>The registration of the command can be done in the function <code class=\"language-text\">registerMenus</code>, which will be called by the Theia framework. The function provides the <code class=\"language-text\">MenuModelRegistry</code> as a parameter. On this registry we can call <code class=\"language-text\">registerMenuAction</code>. It expects a <code class=\"language-text\">MenuPath</code> and a <code class=\"language-text\">MenuAction</code>. The <code class=\"language-text\">MenuPath</code> specifies the menu (and submenu) to place the menu item into. Please see <a href=\"https://eclipse-theia.github.io/theia/docs/next/modules/core.CommonMenus-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here for the paths of some common menus</a>.</p>\n<p>The <code class=\"language-text\">MenuAction</code> consists of a command id, specifying which command to trigger, and an optional label, specifying the label of the menu item.</p>\n<p><strong>helloworld-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloworldMenuContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MenuContribution</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token function\">registerMenus</span><span class=\"token punctuation\">(</span>menus<span class=\"token operator\">:</span> MenuModelRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       menus<span class=\"token punctuation\">.</span><span class=\"token function\">registerMenuAction</span><span class=\"token punctuation\">(</span>CommonMenus<span class=\"token punctuation\">.</span><span class=\"token constant\">EDIT_FIND</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n           commandId<span class=\"token operator\">:</span> HelloworldCommand<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n           label<span class=\"token operator\">:</span> HelloworldCommand<span class=\"token punctuation\">.</span>label\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To make our <code class=\"language-text\">MenuContribution</code> accessible to Theia, we need to bind the custom <code class=\"language-text\">HelloWorldMenuContribution</code> to the respective contribution symbol <code class=\"language-text\">MenuContribution</code>. This is done in the <code class=\"language-text\">helloworld-frontend-module</code>, for more details see <a href=\"/theia-website-previews/pr-previews/pr-562/docs/services_and_contributions/\">Services and Contributions</a>.</p>\n<p><strong>helloworld-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloworldMenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Please note that you also contribute menu items without a command which allows you to create custom top level menus and sub menus. To achieve this, contribute a menu item without a command and then reference the id of this menu item as a <code class=\"language-text\">MenuPath</code> in other contributes. This will add menu items to your custom menu.</p>\n<h2 id=\"contributing-keybindings\" style=\"position:relative;\"><a href=\"#contributing-keybindings\" aria-label=\"contributing keybindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contributing Keybindings</h2>\n<p>Keybindings allow the user to trigger commands using specific key combinations. Keybindings can define conditions, specifying when they are active. As an example, there can be keybindings that are only active when the text editor is focused.</p>\n<p>Please note that the following code examples are not part of the generated template, so you will need to manually add them (see previous sections).</p>\n<p>To contribute a keybinding, implement a <code class=\"language-text\">KeybindingContribution</code> (see code example below) with which you can access the <code class=\"language-text\">KeybindingRegistry</code>, allowing you to register a keybinding. Keybindings consist of:</p>\n<ul>\n<li><code class=\"language-text\">keybinding</code>: The key combination</li>\n<li><code class=\"language-text\">command</code>: The id of the command to be triggered</li>\n<li><code class=\"language-text\">when</code>(optional): The condition when the keybinding should be active</li>\n</ul>\n<p><strong>helloworld-keybinding-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloworldKeybindingContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">KeybindingContribution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">registerKeybindings</span><span class=\"token punctuation\">(</span>keybindings<span class=\"token operator\">:</span> KeybindingRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        keybindings<span class=\"token punctuation\">.</span><span class=\"token function\">registerKeybinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            keybinding<span class=\"token operator\">:</span> <span class=\"token string\">\"alt+enter\"</span><span class=\"token punctuation\">,</span>\n            command<span class=\"token operator\">:</span> <span class=\"token string\">'Helloworld.command'</span><span class=\"token punctuation\">,</span>\n            when<span class=\"token operator\">:</span> <span class=\"token string\">'editorFocus &amp;&amp; editorIsOpen'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The syntax for the “when” clause follows the <a href=\"https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VS Code terminology</a>. Modifiers are platform independent, so <a href=\"https://eclipse-theia.github.io/theia/docs/next/enums/core.keymodifier-2.html#ctrlcmd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Modifier.M1</code></a> is Command on OS X and CTRL on Windows/Linux. Key string constants can be viewed in <a href=\"https://eclipse-theia.github.io/theia/docs/next/modules/core.key-2.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Key</code> documentation</a>.</p>\n<p>Just as you needed to bind the contributions before, keybinding contributions also need to be bound to the symbol <code class=\"language-text\">KeybindingContribution</code> to make them accessible for Theia.</p>\n<p><strong>editor-frontend-module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>KeybindingContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloworldKeybindingContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"commands_keybindings"}}},"pageContext":{"slug":"commands_keybindings"}}}