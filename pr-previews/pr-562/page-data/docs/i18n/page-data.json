{"componentChunkName":"component---src-templates-doc-js","path":"/docs/i18n","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Internationalization"},"html":"<h1 id=\"internationalization\" style=\"position:relative;\"><a href=\"#internationalization\" aria-label=\"internationalization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Internationalization</h1>\n<p>Theia can be localized by installing <a href=\"https://code.visualstudio.com/docs/getstarted/locales\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code language packs</a>. Using the <code class=\"language-text\">Configure Display Language</code> command, users of Theia can change their currently used locale.\nThe framework provides additional features to enable extension developers to localize their own extensions.</p>\n<h2 id=\"localizing-your-extension\" style=\"position:relative;\"><a href=\"#localizing-your-extension\" aria-label=\"localizing your extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Localizing Your Extension</h2>\n<p>Let's say you have a simple string you want to present in the frontend of your application, like a custom widget that displays a goodbye message:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bye</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To display this message using different locales, you can use the <code class=\"language-text\">nls.localize</code> function, imported from the <code class=\"language-text\">@theia/core</code> package:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>nls<span class=\"token punctuation\">.</span><span class=\"token function\">localize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bye'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first argument is a key to identify the translated value. The second argument is the default value that will be used if the user didn't change their locale. When using template expressions in the frontend, keep in mind that the <code class=\"language-text\">nls.localize</code> function allows you to format strings using the additional <code class=\"language-text\">args</code> parameter. When the <code class=\"language-text\">localize</code> function identifies placeholders in the format <code class=\"language-text\">{n}</code> where <em>n</em> represents any number, it will try to replace the placeholder with the input parameter at the appropriate position, e.g. <code class=\"language-text\">{0}</code> will be replaced by the first additional parameter, <code class=\"language-text\">{1}</code> by the second and so forth:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">nls<span class=\"token punctuation\">.</span><span class=\"token function\">localize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye-format'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bye {0} and {1}!'</span><span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">Command</code> namespace provides an additional utility function to help you localize your extension. The <code class=\"language-text\">toLocalizedCommand</code> function accepts a <em>Command</em> and localization keys as its arguments. The first additional key will be used to localize the label and the second for the category. If none are provided, the <em>id</em> of the command will be used as the label localization key:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">command <span class=\"token operator\">=</span> Command<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalizedCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'hello-command'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span>\n    category<span class=\"token operator\">:</span> <span class=\"token string\">'Greetings'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After replacing the all user-facing strings with <code class=\"language-text\">nls.localize</code> calls, you can use the <code class=\"language-text\">theia nls-extract</code> command of the <code class=\"language-text\">@theia/cli</code> package to extract all used localization keys into a single JSON file. For the two examples above, it will result in the following JSON output:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"bye\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bye\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hello\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"greetings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Greetings\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can also group these keys by using forward-slashes. For example, a call like <code class=\"language-text\">nls.localize(&#39;group/bye&#39;, &#39;Bye&#39;)</code> will be transformed into this JSON file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"bye\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bye\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These files will have to be translated into your target languages. Afterwards, you can continue with registering these new localizations for your strings using a custom <code class=\"language-text\">LocalizationContribution</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// creating your own localization contribution for German, Italian and simplified Chinese</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomLocalizationContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LocalizationContribution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">registerLocalizations</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> LocalizationRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Theia uses language codes, e.g. \"de\" for German</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerLocalizationFromRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'de'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/i18n/nls.de.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerLocalizationFromRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/i18n/nls.it.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerLocalizationFromRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zh-cn'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/i18n/nls.zh-cn.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lastly, this <code class=\"language-text\">LocalizationContribution</code> will have to be bound within your backend injection module:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>CustomLocalizationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>LocalizationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toService</span><span class=\"token punctuation\">(</span>CustomLocalizationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Be aware that the <code class=\"language-text\">Configure Display Language</code> command only shows a locale once its language pack has been installed. This assures that no parts of the Theia base framework remain untranslated after a user changes the display language.</p>\n<h2 id=\"changing-the-default-locale\" style=\"position:relative;\"><a href=\"#changing-the-default-locale\" aria-label=\"changing the default locale permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changing the Default Locale</h2>\n<p>If you want to deploy your Theia app to a specific region, you may want to change the default locale.\nTo do this you simply add a <code class=\"language-text\">defaultLocale</code> entry to the frontend configuration of your Theia app in your <code class=\"language-text\">package.json</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"theia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"frontend\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"defaultLocale\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zh-cn\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first time a user starts your Theia app, the locale will be automatically set to the selected default locale.\nThey are still free to change the selected locale using the <code class=\"language-text\">Configure Display Language</code> command.</p>","fields":{"slug":"i18n"}}},"pageContext":{"slug":"i18n"}}}