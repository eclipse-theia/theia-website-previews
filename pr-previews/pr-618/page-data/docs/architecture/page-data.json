{"componentChunkName":"component---src-templates-doc-js","path":"/docs/architecture","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Architecture Overview"},"html":"<h1 id=\"architecture-overview\" style=\"position:relative;\"><a href=\"#architecture-overview\" aria-label=\"architecture overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture Overview</h1>\n<p>This section describes the overall architecture of the Theia Platform.</p>\n<p>Theia is designed to work as a native desktop application as well as in the\ncontext of a browser and a remote server. To support both situations with a\nsingle source, Theia runs in two separate processes. Those processes are called\n<em>frontend</em> and <em>backend</em> respectively, and they communicate through JSON-RPC\nmessages over WebSockets or REST APIs over HTTP. In the case of Electron, the\nbackend, as well as the frontend, run locally, while in a remote context the\nbackend would run on a remote host.</p>\n<p>Both the frontend and backend processes have their dependency injection (DI)\ncontainer (see below) to which extensions can contribute.</p>\n<h2 id=\"frontend\" style=\"position:relative;\"><a href=\"#frontend\" aria-label=\"frontend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Frontend</h2>\n<p>The frontend process represents the client and renders the UI. In the browser,\nit simply runs in the rendering loop, while in Electron it runs in an Electron\nWindow, which basically is a browser with additional Electron and Node.js APIs.\nTherefore, any frontend code may assume browser as a platform but not Node.js.</p>\n<p>The startup of the frontend process will first load the DI modules of all\ncontributing extensions before it obtains an instance of <code class=\"language-text\">FrontendApplication</code>\nand call <code class=\"language-text\">start()</code> on it.</p>\n<h2 id=\"backend\" style=\"position:relative;\"><a href=\"#backend\" aria-label=\"backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backend</h2>\n<p>The backend process runs on Node.js. We use <em>express</em> as the HTTP server. It\nmay not use any code that requires a browser (DOM API) as the platform.</p>\n<p>The startup of the backend application will first load the DI modules of all\ncontributing extensions before it obtains an instance of <code class=\"language-text\">BackendApplication</code>\nand calls <code class=\"language-text\">start(portNumber)</code> on it.</p>\n<p>By default, the backend's express server also serves the code for the frontend.</p>\n<h2 id=\"separation-by-platform\" style=\"position:relative;\"><a href=\"#separation-by-platform\" aria-label=\"separation by platform permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Separation By Platform</h2>\n<p>In an extension's top folder we have an additional layer of folders to separate\nby platform:</p>\n<ul>\n<li>The <code class=\"language-text\">common</code> folder contains code that doesn't depend on any runtime.</li>\n<li>The <code class=\"language-text\">browser</code> folder contains code requiring a modern browser as a platform\n(DOM API).</li>\n<li>The <code class=\"language-text\">electron-browser</code> folder contains frontend code that requires DOM API\nas well as Electron renderer-process specific APIs.</li>\n<li>The <code class=\"language-text\">node</code> folder contains (backend) code requiring Node.js as a platform.</li>\n<li>The <code class=\"language-text\">node-electron</code> folder contains (backend) code specific for Electron.</li>\n</ul>\n<h2 id=\"see-also\" style=\"position:relative;\"><a href=\"#see-also\" aria-label=\"see also permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>See also</h2>\n<p>For a high level overview of Theia's Architecture, see this document:</p>\n<p><a href=\"https://docs.google.com/document/d/1aodR1LJEF_zu7xBis2MjpHRyv7JKJzW7EWI9XRYCt48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Multi-Language IDE Implemented in JS - Scope and Architecture</a></p>","fields":{"slug":"architecture"}}},"pageContext":{"slug":"architecture"}}}