{"componentChunkName":"component---src-templates-doc-js","path":"/docs/label_provider","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Label Provider"},"html":"<h1 id=\"label-provider\" style=\"position:relative;\"><a href=\"#label-provider\" aria-label=\"label provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Label Provider</h1>\n<p>A label provider in Eclipse Theia is responsible for the way elements/nodes are presented in the UI. The label provider determines the icon and the text for elements displayed in trees, lists or other locations such as view headers. A good example is the file explorer: file and directory nodes retrieve their icon and text from the label provider. Another example for the usage of a label provider is the header of an open editor. Please also see the <a href=\"https://eclipse-theia.github.io/theia/docs/next/classes/core.labelprovider-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LabelProvider TypeDoc</a>.</p>\n<p>The default label provider in Theia browses registered label provider contributions to determine the best fitting one for an element/node. The label provider will delegate the calls for a specific node to the contribution which can best handle the element. Eclipse Theia provides default label provider contributions for common types, e.g. for files. By providing your own label provider contributions, you can extend or adapt the look of specific nodes, based on specific criteria.</p>\n<p>In this article we will describe how to customize the label and icon of a custom file type (.my) in Eclipse Theia, as seen in the screenshot below.</p>\n<img src=\"../../custom-label-provider.png\" alt=\"A custom label provider\" style=\"max-width: 525px\">\n<p>If you are not yet familiar with contribution points in Theia or the use of dependency injection, please consider this guide on <a href=\"/theia-website-previews/pr-previews/pr-585/docs/services_and_contributions/\">Services and Contributions</a>.</p>\n<p>All the following code examples are from the <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia extension generator</a>. You can get the same code set-up by installing the generator, selecting the “Label Provider” example (see <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>) and choosing “labelProvider” as the name.</p>\n<h2 id=\"contributing-a-label-provider\" style=\"position:relative;\"><a href=\"#contributing-a-label-provider\" aria-label=\"contributing a label provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contributing a Label Provider</h2>\n<p>To contribute a custom label provider contribution you provide a <code class=\"language-text\">LabelProviderContribution</code>, i.e. a class implementing this interface. In this example, instead of directly implementing the interface, we extend the default implementation for files: <code class=\"language-text\">FileTreeLabelProvider</code>. This allows us to only override the behavior we want to customize.</p>\n<p><strong>labelprovider-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LabelproviderLabelProviderContribution</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FileTreeLabelProvider</span></code></pre></div>\n<p>The function <code class=\"language-text\">canHandle</code> determines whether the label provider contribution is responsible for a specific node (in our example for \".my\" files). Therefore, it can check any condition on the respective file, e.g. the file extension. The return value of the function is an integer representing the priority of the label provider contribution, the label provider contribution with the highest priority will be used by the label provider. This way, you can override the default label provider contributions to custom files by returning a higher priority.</p>\n<p>The <code class=\"language-text\">canHandle</code> function receives an object representing the file handed in as a parameter (for the file tree a <code class=\"language-text\">FileStatNode</code>). Please see an example implementation for canHandle below, which will register a label provider contribution for the file extension “.my”:</p>\n<p><strong>labelprovider-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FileStatNode<span class=\"token punctuation\">.</span><span class=\"token keyword\">is</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> uri <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>ext <span class=\"token operator\">===</span> <span class=\"token string\">'.my'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once the label provider contribution is registered for your custom file extension, you can optionally implement <code class=\"language-text\">getName</code>, <code class=\"language-text\">getIcon</code> and <code class=\"language-text\">getLongName</code>. These receive a URI as a parameter and return a custom icon and a custom name for the respective file. Icon and name are used in the file view of Theia. The long name (not customized in the example) is shown as a tooltip when you hover over the file in an opened editor tab. For more details, see the <a href=\"https://eclipse-theia.github.io/theia/docs/next/interfaces/core.labelprovidercontribution-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">LabelProviderContribution</code> TypeDoc</a></p>\n<p><strong>labelprovider-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">getIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'fa fa-star-o'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>fileStatNode<span class=\"token operator\">:</span> FileStatNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>fileStatNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' (with my label)'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To make our <code class=\"language-text\">LabelProviderContribution</code> accessible to Theia, we need to bind the custom <code class=\"language-text\">LabelProviderLabelProviderContribution</code> to the respective contribution symbol <code class=\"language-text\">LabelProviderContribution</code>. This is done in the <code class=\"language-text\">labelprovider-frontend-module</code>, for more details see <a href=\"/theia-website-previews/pr-previews/pr-585/docs/services_and_contributions/\">Services and Contributions</a>.</p>\n<p><strong>labelprovider-frontend-module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// label binding</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>LabelProviderContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>LabelProviderLabelProviderContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"adding-a-custom-icon-via-css\" style=\"position:relative;\"><a href=\"#adding-a-custom-icon-via-css\" aria-label=\"adding a custom icon via css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding a custom icon via CSS</h2>\n<p>The <code class=\"language-text\">getIcon</code> function returns a CSS string identifying an icon for the custom file type. In the example above, we use a Font Awesome icon. If you want to use a custom icon, you need to add this icon to the CSS as well. Usually, there will be multiple versions of an icon depending on the style (dark vs. light). The following example shows how to add a custom icon. To use this in the example, replace the returned string in <code class=\"language-text\">getIcon</code> above with ‘my-icon’</p>\n<p><strong>example.css</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.my-icon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 13px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 13px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.light-plus .my-icon</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>'./custom_icon_black_18dp.png'<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.dark-plus .my-icon</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>'./custom_icon_white_18dp.png'<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"label_provider"}}},"pageContext":{"slug":"label_provider"}}}