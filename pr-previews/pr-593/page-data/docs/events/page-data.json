{"componentChunkName":"component---src-templates-doc-js","path":"/docs/events","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Events"},"html":"<h1 id=\"events\" style=\"position:relative;\"><a href=\"#events\" aria-label=\"events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events</h1>\n<p>Events in Theia can be confusing, hopefully we can clarify things.</p>\n<p>Let's consider this code:</p>\n<p>(From logger-watcher.ts)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerWatcher</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">getLoggerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ILoggerClient <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onLogLevelChangedEmitter\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token operator\">:</span> ILogLevelChangedEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                emitter<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> onLogLevelChangedEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emitter</span><span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Event<span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onLogLevelChangedEmitter<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's start with:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">private</span> onLogLevelChangedEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emitter</span><span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So first what is an <code class=\"language-text\">Emitter</code>?</p>\n<p>An Emitter is an event handler container,\nit allows for event handlers to be registered on it and triggered with an\nevent of type X in this case an ILogLevelChangedEvent.</p>\n<p>So here we just create an <code class=\"language-text\">Emitter</code> that will have events of type ILogLevelChangedEvent;</p>\n<p>Next we want to be able to register an event handler on this <code class=\"language-text\">Emitter</code> to\ndo so we do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">get</span> <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Event<span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onLogLevelChangedEmitter<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>What this actually returns is a function that will register an event\nhandler. Passing it your event handler function will\nregister it so that it's called when the event fires.</p>\n<p>So you can call:</p>\n<p>(From logger.ts)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token comment\">/* Update the root logger log level if it changes in the backend. */</span>\n        loggerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rootLoggerId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_logLevel <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>newLogLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This registers the anonymous function passed as param on this emitter.</p>\n<p>Next we will need to trigger this event handler by firing an event:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token operator\">:</span> ILogLevelChangedEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                emitter<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span></code></pre></div>\n<p>When calling this function, the emitter fires and all the event handlers\nare called.</p>\n<p>So if you need to trigger events in theia:</p>\n<ul>\n<li>Create an emitter</li>\n<li>Register events with the emitter.event function</li>\n<li>Fire events with emitter.fire(event)</li>\n</ul>","fields":{"slug":"events"}}},"pageContext":{"slug":"events"}}}