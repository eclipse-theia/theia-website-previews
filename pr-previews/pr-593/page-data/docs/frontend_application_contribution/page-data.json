{"componentChunkName":"component---src-templates-doc-js","path":"/docs/frontend_application_contribution","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Frontend Application Contributions"},"html":"<h1 id=\"frontend-application-contributions\" style=\"position:relative;\"><a href=\"#frontend-application-contributions\" aria-label=\"frontend application contributions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Frontend Application Contributions</h1>\n<p>Frontend application contributions can react to lifecycle events of the Theia frontend application to execute behavior before the frontend is started or stopped, or once the frontend’s layout is initialized.\nBesides providing a generally useful startup hook, frontend application contributions are also typically used to open and arrange views, register listeners, add status bar items, or customize the layout of the application shell when the application is started.\nAnother use case is to react to shutdown, for instance, to persist certain application data on shutdown, e.g. using the <code class=\"language-text\">StorageService</code>.</p>\n<p>As any other frontend contribution, frontend application contributions are also registered in a frontend module by binding an implementation of the <code class=\"language-text\">FrontendApplicationContribution</code> interface.\nA typical pattern is a view that shall always be initially opened on startup.\nTherefore, the view implementation does not only extend the <code class=\"language-text\">AbstractViewContribution&lt;MyWidget&gt;</code>, but is also registered as <code class=\"language-text\">FrontendApplicationContribution</code> to open the contributed view after the application shell layout is initialized.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   …\n   <span class=\"token function\">bindViewContribution</span><span class=\"token punctuation\">(</span>bind<span class=\"token punctuation\">,</span> MyViewContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>FrontendApplicationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toService</span><span class=\"token punctuation\">(</span>MyViewContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Besides the view implementation itself, the view can now implement the method <code class=\"language-text\">initializeLayout(app: FrontendApplication)</code> from the <code class=\"language-text\">FrontendApplicationContribution</code> interface to open itself after the layout has been initialized.\nNote that this method is only called if there is no previously stored workbench layout available, which makes it ideal to implement initial workbench layouts, as it won’t override layout changes that users already applied manually in a previous session.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyViewContribution</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractViewContribution</span><span class=\"token operator\">&lt;</span>MyViewWidget<span class=\"token operator\">></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FrontendApplicationContribution</span> <span class=\"token punctuation\">{</span>\n   …\n   <span class=\"token keyword\">async</span> <span class=\"token function\">initializeLayout</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> FrontendApplication<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">openView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If a frontend application contribution needs to be invoked every time the application is started -- and not only after initial layout when there is no previously stored layout state -- the methods <code class=\"language-text\">configure(app: FrontendApplication)</code> and <code class=\"language-text\">onStart(app: FrontendApplication)</code> can be used instead.\nAs these methods are invoked even before the application shell is attached or menus are initialized, you may want to use those in combination with the frontend application state service, depending on your use case.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyViewContribution</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractViewContribution</span><span class=\"token operator\">&lt;</span>MyViewWidget<span class=\"token operator\">></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FrontendApplicationContribution</span> <span class=\"token punctuation\">{</span>\n   …\n   @<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>FrontendApplicationStateService<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> stateService<span class=\"token operator\">:</span> FrontendApplicationStateService<span class=\"token punctuation\">;</span>\n   …\n   <span class=\"token keyword\">async</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> FrontendApplication<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateService<span class=\"token punctuation\">.</span><span class=\"token function\">reachedState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ready'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">openView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> reveal<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another typical use for frontend application contributions is to install listeners, e.g. to react to changes of preferences, or to add custom widgets to the application shell in the <code class=\"language-text\">configure(app: FrontendApplication)</code> and <code class=\"language-text\">onStart(app: FrontendApplication)</code> respectively.</p>","fields":{"slug":"frontend_application_contribution"}}},"pageContext":{"slug":"frontend_application_contribution"}}}