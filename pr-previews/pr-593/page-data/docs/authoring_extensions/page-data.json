{"componentChunkName":"component---src-templates-doc-js","path":"/docs/authoring_extensions","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Authoring an Extension"},"html":"<h1 id=\"authoring-theia-extensions\" style=\"position:relative;\"><a href=\"#authoring-theia-extensions\" aria-label=\"authoring theia extensions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authoring Theia Extensions</h1>\n<p>This guide will walk you through the process of creating Theia extensions and deploying them in your Theia-based application. Please make sure to be aware of the <a href=\"/theia-website-previews/pr-previews/pr-593/docs/extensions/\">different available extension mechanisms</a> of Theia (Plugins vs. Extensions) before you continue reading.</p>\n<p>As an example, we are going to add a menu item <em>Say hello</em> that displays a notification \"Hello world!\". This article is guiding you through all the necessary steps.</p>\n<h2 id=\"theias-architecture\" style=\"position:relative;\"><a href=\"#theias-architecture\" aria-label=\"theias architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Theiaâ€™s Architecture</h2>\n<p>A Theia app is composed of so-called <em>extensions</em>. An extension provides a set of widgets, commands, handlers, etc. for a specific functionality. Theia itself ships a number of extensions, e.g. for editors, terminals, the project view etc. Each extension resides in its own npm package.</p>\n<p>Theia defines a plethora of contribution interfaces that allow extensions to add their behaviour to various aspects of the application. Just search for interfaces with the name <code class=\"language-text\">*Contribution</code> to get an idea. An extension implements the contribution interfaces belonging to the functionality it wants to deliver. In this example, we are going to implement a <code class=\"language-text\">CommandContribution</code> and a <code class=\"language-text\">MenuContribution</code>. Other ways for extensions to interact with a Theia application are via one of the various <em>services</em> or <em>managers</em>.</p>\n<p>In Theia, everything is wired up via <a href=\"/theia-website-previews/pr-previews/pr-593/docs/services_and_contributions#dependency-injection-di\">dependency injection</a>. An extension defines one or more dependency injection modules. This is where it binds its contribution implementations to the respective contribution interface. The modules are listed in the <code class=\"language-text\">package.json</code> of the extension package. An extension can contribute to the frontend, e.g. providing a UI extension, as well as to the backend, e.g. contributing a language server. When the application starts, the union of all these modules is used to configure a single, global dependency injection container on each, the frontend and the backend. The runtime will then collect all contributions of a specific kind by means of a multi-inject.</p>\n<h2 id=\"prerequisites\" style=\"position:relative;\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>Prerequisites information are available from the <a href=\"https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#prerequisites\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia repository</a>.</p>\n<h2 id=\"project-layout\" style=\"position:relative;\"><a href=\"#project-layout\" aria-label=\"project layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Layout</h2>\n<p>We are going to create a monorepo (a repository containing multiple npm packages) named <code class=\"language-text\">theia-hello-world-extension</code> containing three packages: <code class=\"language-text\">hello-world-extension</code>, <code class=\"language-text\">browser-app</code> and <code class=\"language-text\">electron-app</code>. The first contains our extension, the latter two the Theia applications to run our extension in browser and electron mode.  We are going to use <code class=\"language-text\">yarn</code> instead of <code class=\"language-text\">npm</code>, because it allows to structure such monorepos into workspaces. In our case, each workspace contains its own <code class=\"language-text\">npm</code> package. Common dependencies of these packages are 'hoisted' by <code class=\"language-text\">yarn</code> to their common root directory. We are also going to use <code class=\"language-text\">lerna</code> to run scripts across workspaces.</p>\n<p>To ease the setup of such a repository we have created a <a href=\"https://www.npmjs.com/package/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code generator</a> to scaffold the project. It will also generate the <code class=\"language-text\">hello-world</code> example. Run it using</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g yo generator-theia-extension\n<span class=\"token function\">mkdir</span> theia-hello-world-extension\n<span class=\"token builtin class-name\">cd</span> theia-hello-world-extension\nyo theia-extension <span class=\"token comment\"># select the 'Hello World' option and complete the prompts</span></code></pre></div>\n<p>Let's have look at the generated code now. The root <code class=\"language-text\">package.json</code> defines the workspaces, the dependency to <code class=\"language-text\">lerna</code> and some scripts to rebuild the native packages for browser or electron.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lerna run prepare\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rebuild:browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia rebuild:browser\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rebuild:electron\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia rebuild:electron\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lerna\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.4.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"hello-world-extension\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"browser-app\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"electron-app\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also got a <code class=\"language-text\">lerna.json</code> file to configure <code class=\"language-text\">lerna</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lerna\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.4.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"useWorkspaces\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"npmClient\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"stream\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"implementing-the-extension\" style=\"position:relative;\"><a href=\"#implementing-the-extension\" aria-label=\"implementing the extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementing the Extension</h2>\n<p>Next let's look at the generated code for our extension in the <code class=\"language-text\">hello-world-extension</code> folder. Letâ€™s start with the <code class=\"language-text\">package.json</code>. It specifies the packageâ€™s metadata, its dependencies to the (bleeding edge) Theia core package, a few scripts and dev dependencies, and the theia-extensions.</p>\n<p>The keyword <code class=\"language-text\">theia-extension</code> is important: It allows a Theia app to identify and install Theia extensions from <code class=\"language-text\">npm</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello-world-extension\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"theia-extension\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@theia/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"rimraf\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn run clean &amp;&amp; yarn run build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf lib\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc -w\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"theiaExtensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"frontend\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/browser/hello-world-frontend-module\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The last property <code class=\"language-text\">theiaExtensions</code> is where we list the JavaScript modules that export the DI modules defining the contribution bindings of our extension. In our case, we only provide a frontend capability (a command and a menu entry). Analogously, you could also define contributions to the backend, e.g. a language contribution with a language server.</p>\n<p>In the frontend module we export a default object that is a <a href=\"https://github.com/inversify/InversifyJS/blob/master/wiki/container_modules.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">InversifyJS <code class=\"language-text\">ContainerModule</code></a> with bindings for a command contribution and a menu contribution.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// add your contribution bindings here</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>CommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloWorldCommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloWorldMenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A command is a plain data structure defining an ID and a label. The behaviour of a command is implemented by registering a handler to its ID in a command contribution. The generator has already added a command and a handler that shows a \"Hello World!\" message.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> HelloWorldCommand <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld.command'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">\"Shows a message\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldCommandContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandContribution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>MessageService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> messageService<span class=\"token operator\">:</span> MessageService<span class=\"token punctuation\">,</span></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">registerCommands</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> CommandRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerCommand</span><span class=\"token punctuation\">(</span>HelloWorldCommand<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">execute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>Note how we use <code class=\"language-text\">@inject</code> in the constructor to get the <code class=\"language-text\">MessageService</code> as a property, and how we use that later in the implementation of the handler. This is the elegance of dependency injection: As a client, we neither care where these dependencies come from nor what their lifecycle is.</p>\n<p>To make it accessible by the UI, we implement a <code class=\"language-text\">MenuContribution</code>, adding an item to the Search/Replace section of the edit menu in the menu bar.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">...</span>\n@<span class=\"token function\">injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldMenuContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MenuContribution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">registerMenus</span><span class=\"token punctuation\">(</span>menus<span class=\"token operator\">:</span> MenuModelRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        menus<span class=\"token punctuation\">.</span><span class=\"token function\">registerMenuAction</span><span class=\"token punctuation\">(</span>CommonMenus<span class=\"token punctuation\">.</span><span class=\"token constant\">EDIT_FIND</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                commandId<span class=\"token operator\">:</span> HelloWorldCommand<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n                label<span class=\"token operator\">:</span> <span class=\"token string\">'Say Hello'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"executing-the-extension-in-the-browser\" style=\"position:relative;\"><a href=\"#executing-the-extension-in-the-browser\" aria-label=\"executing the extension in the browser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Executing the Extension In the Browser</h2>\n<p>Now we want to see our extension in action. For this purpose, the generator has created a <code class=\"language-text\">package.json</code> in the folder <code class=\"language-text\">browser-app</code>. It defines a Theia browser application with a couple of statically included extensions, including our <code class=\"language-text\">hello-world-extension</code>. All remaining files in this directory have been auto-generated by <code class=\"language-text\">yarn</code> calling the <code class=\"language-text\">theia-cli</code> tool during the build, as defined in the scripts section.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"browser-app\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@theia/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/filesystem\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/workspace\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/preferences\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/navigator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/process\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/terminal\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/editor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/languages\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/markers\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/monaco\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/messages\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hello-world-extension\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@theia/cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia build --watch\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"theia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"browser\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we have all pieces together to build and run the application.\nTo run the browser app, enter:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> browser-app\n<span class=\"token function\">yarn</span> start <span class=\"token operator\">&lt;</span>path to workspace<span class=\"token operator\">></span></code></pre></div>\n<p>Point your browser to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000</a>. Then choose <em>Edit > Say Hello</em> from the menu: A message \"Hello World!\" should pop up.</p>\n<h2 id=\"executing-the-extension-in-electron\" style=\"position:relative;\"><a href=\"#executing-the-extension-in-electron\" aria-label=\"executing the extension in electron permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Executing the Extension In Electron</h2>\n<p>The <code class=\"language-text\">package.json</code> for the Electron app looks almost the same, except for the name and the target property.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron-app\"</span><span class=\"token punctuation\">,</span>\n  ...\n  <span class=\"token property\">\"theia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Before running the electron app, you additionally have to rebuild some native modules:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> rebuild:electron\n<span class=\"token builtin class-name\">cd</span> electron-app\n<span class=\"token function\">yarn</span> start <span class=\"token operator\">&lt;</span>path to workspace<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"deploying-the-extension\" style=\"position:relative;\"><a href=\"#deploying-the-extension\" aria-label=\"deploying the extension permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploying the Extension</h2>\n<p>If you want to make your extension publicly available, we recommend publishing it to npm. This can be achieved by calling <code class=\"language-text\">yarn publish</code> from the extension package's directory. Of course, you need a valid account for that.</p>","fields":{"slug":"authoring_extensions"}}},"pageContext":{"slug":"authoring_extensions"}}}