{"componentChunkName":"component---src-templates-doc-js","path":"/docs/message_service","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Message Service"},"html":"<h1 id=\"message-service\" style=\"position:relative;\"><a href=\"#message-service\" aria-label=\"message service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Message Service</h1>\n<p>The message service allows you to show messages, interactive dialogues and progress information to the user. You can get the <code class=\"language-text\">MessageService</code> injected and call either <code class=\"language-text\">info</code>, <code class=\"language-text\">warn</code> or <code class=\"language-text\">error</code> on it to report your message (see code example below):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>MessageService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> messageService<span class=\"token operator\">:</span> MessageService\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>By default, Theia will display messages as toast notifications in the bottom right corner. Below you can see screenshots of the different message types (info, warn and error). Please note that you can easily adopt Theia to implement a different behavior for displaying messages by providing a custom <code class=\"language-text\">MessageClient</code>.</p>\n<p>Info</p>\n<img src=\"../message-service-info.png\" alt=\"Message Service - info\" style=\"max-width: 525px\">\n<p>Warn</p>\n<img src=\"../message-service-warn.png\" alt=\"Message Service - warning\" style=\"max-width: 525px\">\n<p>Error</p>\n<img src=\"../message-service-error.png\" alt=\"Message Service - error\" style=\"max-width: 525px\">\n<p>By default, notifications will be displayed until the user closes them. You can optionally define a time-out after which messages will be closed automatically:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Say Hello with timeout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>timeout<span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Optionally, you can also add actions that the user can execute. In case the user executes an action, the message service call will resolve to the action string which was handed over.</p>\n<p>In the following code example, we provide the two actions “Say Hello again!” and “Cancel”. We react to the action “Say hello again!” by posting yet another message, “Cancel” will be ignored.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>MessageService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> messageService<span class=\"token operator\">:</span> MessageService\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService\n <span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Say Hello again!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cancel\"</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action <span class=\"token operator\">===</span> <span class=\"token string\">\"Say Hello again!\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello again!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The corresponding toast notification will look like this:</p>\n<img src=\"../message-service-user-action.png\" alt=\"Message Service - user action\" style=\"max-width: 525px\">\n<p>When the user selects “Say Hello again”, another toast notification will be shown:</p>\n<img src=\"../message-service-hello-again.png\" alt=\"Message Service - after user action\" style=\"max-width: 525px\">\n<h2 id=\"progress-reporting\" style=\"position:relative;\"><a href=\"#progress-reporting\" aria-label=\"progress reporting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Progress Reporting</h2>\n<p>The message service also allows you to report progress on an ongoing operation. You can incrementally update a progress bar and the message while the toast notification remains visible until the operation is done. The following example opens a progress bar and updates the status three times before it is completed. Please see the <a href=\"https://eclipse-theia.github.io/theia/docs/next/classes/core.messageservice-1.html#showprogress\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeDoc of <code class=\"language-text\">MessageService</code></a> for more detailed information.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService\n <span class=\"token punctuation\">.</span><span class=\"token function\">showProgress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Doing something</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Do something</span>\n   progress<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     message<span class=\"token operator\">:</span> <span class=\"token string\">\"First step completed\"</span><span class=\"token punctuation\">,</span>\n     work<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> done<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> total<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// Do something</span>\n   progress<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     message<span class=\"token operator\">:</span> <span class=\"token string\">\"Next step completed\"</span><span class=\"token punctuation\">,</span>\n     work<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> done<span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> total<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// Do something</span>\n   progress<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     message<span class=\"token operator\">:</span> <span class=\"token string\">\"Complete\"</span><span class=\"token punctuation\">,</span>\n     work<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> done<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> total<span class=\"token operator\">:</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   progress<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note that <code class=\"language-text\">progress.cancel</code> is also used to signal that progress is complete.\nThe code example above will be displayed like this:</p>\n<img src=\"../message-service-progress-reporting.gif\" alt=\"Message Service - progress reporting\" style=\"max-width: 525px\">","fields":{"slug":"message_service"}}},"pageContext":{"slug":"message_service"}}}