{"componentChunkName":"component---src-templates-doc-js","path":"/docs/authoring_plugins","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Authoring Plug-ins"},"html":"<h1 id=\"authoring-theia-plug-ins\" style=\"position:relative;\"><a href=\"#authoring-theia-plug-ins\" aria-label=\"authoring theia plug ins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authoring Theia Plug-ins</h1>\n<p>This documentation is deprecated and needs to be updated. We currently recommend using VS Code extensions or Theia extensions instead of Theia Plugins. See the <a href=\"https://theia-ide.org/docs/extensions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">extension overview</a> for more details.</p>\n<!--\nLet's create our first Theia plug-in. As an example, we are going to register a command _Hello World_ that displays a notification \"Hello world!\". This article is guiding you through all the necessary steps.\n\n## Theiaâ€™s Architecture\n\n### Plug-in vs Extension\n\nTheia is an extensible IDE. You may already have heard extensions as being a way to customize the IDE. Plug-ins is a new extensibility model that has been added recently into Theia. Here are the main differences between plug-ins vs the extensions.\n\n#### Plug-ins\n\npros:\n + Code isolation: as plug-in's code in running in separate processes, it can't block Theia core processes.\n + Can be loaded at runtime. No need to recompile the full IDE of Theia.\n + Reduce compilation time\n + Self-contained. A plug-in can be packaged into a single file and loaded directly after. No extra need to grab dependencies from npmjs, etc.\n + Simple API\n   + No need to learn inversify or any framework.\n   + Single entry point, with code completion to see possible calls with associated JsDoc.\n + Upgrade easily from one theia version to another version as API is backward compliant.\n\ncons:\n - Need to stick to this pre-defined API. It's not possible to tweak something if contribution point is not provided through API. Note that current API can be extended to support more stuff ;-)\n\n### Design\nA Theia app is composed of a core providing a set of widgets, commands, handlers, etc. for a specific functionality.\n\nTheia defines a runtime API allowing plug-ins to customize the IDE and add their behaviour to various aspects of the application.\n\nIn Theia, a plug-in has access to the API through an object named `theia` which is available in all plug-ins.\n[More details on API](https://github.com/eclipse-theia/theia/blob/master/packages/plugin/README.md).\n\nThere are two natures of plug-ins:\n - Backend plug-in. If you're familiar with VS Code extensions, it's very close. The plug-in's code is running in its own process on the server side. The API is called and it will send some actions on user's browser/UI to register new commands, etc. All the callbacks are executed on the server side on a dedicated process.\n - Frontend plug-in. In that case, callbacks are executed in a worker thread on the UI/browser. These plug-ins are only authorized to use \"browser compliant\" modules. For example opening or writing to a file is impossible as all the code of the plug-in is running on the browser side. But this approach is helpful if you really want to have some stuff on the client side to avoid some network operations.\n\n## Prerequisites\n\nHaving a running Theia instance. (v0.3.12+)\nInstructions for getting Theia are available from [Theia repository](https://github.com/eclipse-theia/theia#getting-started).\n\n## Project Layout\n\nWe are going to create a new project and for this we will create a folder named `theia-hello-world-plugin` that will contain the source code of the project.\n\nThis new folder can be created in any directories, it is independent of Theia source code.\n\nTo ease the setup of such a repository, a [Yeoman code generator](https://www.npmjs.com/package/@theia/generator-plugin) exists and can be installed to scaffold the project.\n\nGenerator can be installed and executed with the following commands. Note that these commands can be entered from a new terminal inside your running Theia instance.\n\n```bash\nnpm install -g yo @theia/generator-plugin\nmkdir theia-hello-world-plugin\ncd theia-hello-world-plugin\nyo @theia/plugin\n```\n\nIn the previous commands:\n- `npm install -g yo @theia/generator-plugin` command install globally the Theia generator.\n- `yo @theia/plugin` is calling the yeoman generator asking to use for templating the Theia's plug-in generator.\n\nHere is an animated screenshot of the generator running.\n\n<img src=\"../../yeoman-plugin.gif\" class=\"doc-image\" alt=\"Yeoman plugin output\">\n\nPick up default values for each question.\n\nAt this step, in `theia-hello-world-plugin` folder there is a plug-in that is already built with associated source code.\n\n## Implementing the Plug-in\n\nLet's have look at the generated code now.\n\n```json\n{\n      \"name\": \"theia-hello-world-plugin\",\n      \"publisher\": \"theia\",\n      \"keywords\": [\n        \"theia-plugin\"\n      ],\n      \"version\": \"0.0.1\",\n      \"files\": [\n        \"src\"\n      ],\n      \"devDependencies\": {\n        \"@theia/plugin\": \"latest\", <-- 1. Theia API dependency\n        \"rimraf\": \"^2.6.2\",\n        \"typescript\": \"^2.9.2\"\n      },\n      \"scripts\": {\n        \"prepare\": \"yarn run clean && yarn run build\",\n        \"clean\": \"rimraf lib\",\n        \"build\": \"tsc\"\n      },\n      \"engines\": {\n        \"theiaPlugin\": \"latest\"  <-- 2. this plug-in requires Theia runtime\n      },\n      \"theiaPlugin\": {\n        \"backend\": \"lib/theia-hello-world-plugin-backend-plugin.js\" 3. <-- entrypoint\n      }\n}\n```\n\nThere are three important parts in this `package.json` file\n\n1. First, in `devDependencies`, there is the dependency to `@theia/plugin`. This package will be used inside the plug-in's code to call Theia API (like adding a new command and displaying a new information message).\n\n2. Second, the `engines` section contains `theiaPlugin`. It allows to flag this node package as being runnable on top of a specific version of Theia.\n\n3. Third, the `theiaPlugin` section contains the entry-point of the plug-in. For a backend plug-in, it is `backend` key with the value being the path to the JavaScript path of the plug-in.\n\nLet's have a look to the single source code file that has been generated. The path of this file is `src/theia-hello-world-plugin-backend-plugin.ts`. It contains TypeScript code.\n\n```typescript\nimport * as theia from '@theia/plugin';\n\nexport function start() {\n    const informationMessageTestCommand = {\n        id: 'hello-world-example-generated',\n        label: \"Hello World\"\n    };\n    theia.commands.registerCommand(informationMessageTestCommand, (...args: any[]) => {\n        theia.window.showInformationMessage('Hello World!');\n    });\n\n}\n\nexport function stop() {\n\n}\n```\n\nAs you can see, only few lines of code are required to register a command and display a notification message.\n\nFirst important line is the import of the API.\nThe import `import * as theia from '@theia/plugin';` is making all Theia plug-in's API available into a theia object.\n\nIn the code, there are two methods that are `start()` and `stop()`\n\nThe `start()` method is called when loading the plug-in. In this method, there is one action: registering hello world command and one callback: displaying `Hello World` as an information message. The command object has an `id` and a `label` that will be displayed in the command palette.\n\nThere is an empty `stop()` method that could be used to do something when the plug-in is stopped. This method is optional and may be removed if empty.\n\n## Executing the Plug-in\n\nNow we want to see the plug-in in action. For this purpose, there is a mode called `hosted mode` within Theia. When using this mode, we can develop the plug-in within one instance of Theia, and then we can deploy the plug-in in another instance of Theia. So it's very easy to spawn the plug-in and test it.\n\nFirst, be sure that you've opened the folder where is the generated plug-in inside Theia. (It needs to be part of your workspace)\nThen, bring command palette (hitting the F1 key for example) and search for `Hosted mode: start instance` and select this command.\n\n<img class=\"doc-image\" src=\"/hosted-plugin-start-instance.png\" alt=\"Hosted mode: start instance\" style=\"max-width: 800px\">\n\nBrowse the workspace and select the folder of the plug-in (that contains `package.json` file).\n\n<img class=\"doc-image\" src=\"/hosted-plugin-start-instance-select-path.png\" alt=\"Hosted mode: start instance: select path\" style=\"max-width: 500px\">\n\nIt will spawn a new theia instance on port `3030`. A new tab will be opened (maybe you'll need to validate it) and you've a new instance running as `Development host` (in status bar you can check that name)\n\n<img class=\"doc-image\" src=\"/hosted-plugin-development-host.png\" alt=\"Hosted mode: development host\" style=\"max-width: 300px\">\n\nInside the `Development Host` instance, bring command palette (F1 key) and then search for `Hello World` command.\n\n<img class=\"doc-image\" src=\"/command-palette-hello-world.png\" alt=\"Command Palette\" style=\"max-width: 700px\">\n\nSelect it and you'll see a notification `Hello World` on the screen.\n\n<img class=\"doc-image\" src=\"/hello-world-notification.png\" alt=\"Hello World notification\" style=\"max-width: 600px\">\n\n## Developing the Plug-in\n\nAs previously said, Theia API is provided through TypeScript, then there is code completion and JsDoc available when developing.\n\n## Updating the Plug-in\n\nLet say you want to change the information message from `Hello World` to `Hello Theia`. Let's go into the `Hosted Plugin: running` instance (status bar), edit the TypeScript file `src/theia-hello-world-plugin-backend-plugin.ts` and perform the following change.\nReplace `theia.window.showInformationMessage('Hello World!');` by `theia.window.showInformationMessage('Hello Theia!');`\n\nRun the command `yarn build` from root folder of the plug-in for source code to be recompiled.\nThen you'll only have to refresh the tab of the `Development Host` instance, the plugin will be reloaded again.\n\nNote: you may use watch mode as well.\n\n## API of plug-ins\n[Browse typedoc of plug-ins](https://eclipse-theia.github.io/theia/docs/next/modules/plugin.html)\n\n## VS Code implementation\nTheia is providing VS Code API. Check the following link to get the current status of what is implemented.\n[Compare Theia vs VS Code API](https://eclipse-theia.github.io/vscode-theia-comparator/status.html)\n\n-->","fields":{"slug":"authoring_plugins"}}},"pageContext":{"slug":"authoring_plugins"}}}