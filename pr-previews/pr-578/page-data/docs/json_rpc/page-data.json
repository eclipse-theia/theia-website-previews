{"componentChunkName":"component---src-templates-doc-js","path":"/docs/json_rpc","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Communication via RPC"},"html":"<h1 id=\"communication-via-rpc\" style=\"position:relative;\"><a href=\"#communication-via-rpc\" aria-label=\"communication via rpc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Communication via RPC</h1>\n<p>In this section we will explain how you can create a backend service and\nthen connect to it over RPC.</p>\n<p>We will use the task execution system as a small example of that.</p>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>This works by creating a service exposed by the express framework and\nthen connecting to that over a websocket connection.</p>\n<h2 id=\"registering-a-service\" style=\"position:relative;\"><a href=\"#registering-a-service\" aria-label=\"registering a service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Registering a service</h2>\n<p>So the first thing you will want to do is expose your service so that the\nfrontend can connect to it.</p>\n<p>You will need to create backend server module file similar to this (<code class=\"language-text\">task-backend-module.ts</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ContainerModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/shared/inversify'</span>'<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConnectionHandler<span class=\"token punctuation\">,</span> RpcConnectionHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/lib/common/messaging'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TaskClient<span class=\"token punctuation\">,</span> TaskServer<span class=\"token punctuation\">,</span> taskPath <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/task-protocol'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ConnectionHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcConnectionHandler</span><span class=\"token operator\">&lt;</span>TaskClient<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>taskPath<span class=\"token punctuation\">,</span> <span class=\"token parameter\">client</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> taskServer <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token operator\">&lt;</span>TaskServer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>TaskServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            taskServer<span class=\"token punctuation\">.</span><span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> taskServer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's go over that in detail:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConnectionHandler<span class=\"token punctuation\">,</span> RpcConnectionHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/lib/common/messaging'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This imports the <code class=\"language-text\">RpcConnectionHandler</code>, this factory enables you to create\na connection handler that <code class=\"language-text\">onConnection</code> creates a proxy object to the remote object that\nis called in the backend over RPC and optionally exposes a local object to RPC.</p>\n<p>We'll see more on how this is done as we go.</p>\n<p>The <code class=\"language-text\">ConnectionHandler</code> is a simple interface that specifies the path of the\nconnection and what happens on connection creation.</p>\n<p>It looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Channel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../message-rpc/channel'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ConnectionHandler <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ConnectionHandler'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConnectionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Channel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TaskClient<span class=\"token punctuation\">,</span> TaskServer<span class=\"token punctuation\">,</span> taskPath <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/task-protocol'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">task-protocol.ts</code> file contains the interfaces that the server and the\nclient need to implement.</p>\n<p>The server here means the backend object that will be called over RPC\nand the client is a client object that can receive notifications from the\nbackend object.</p>\n<p>We will get more into that later.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    bind<span class=\"token operator\">&lt;</span>ConnectionHandler<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ConnectionHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>Here a bit of magic happens, at first glance we're just saying here is an\nimplementation of a <code class=\"language-text\">ConnectionHandler</code>.</p>\n<p>The magic here is that this <code class=\"language-text\">ConnectionHandler</code> type is bound to a\nContributionProvider. A central <code class=\"language-text\">MessagingContribution</code> picks up all registered connection handlers\nan when this contribution is initialized it creates a websocket channel for all bound <code class=\"language-text\">ConnectionHandlers</code>.\nTo save resources the hood all <code class=\"language-text\">MessagingContributions</code> are routed over one\nwebsocket connection (multiplexing).</p>\n<p>To dig more into ContributionProvider see this <a href=\"/theia-website-previews/pr-previews/pr-578/docs/services_and_contributions#contribution-providers\">section</a>.</p>\n<p>So now:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">   <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcConnectionHandler</span><span class=\"token operator\">&lt;</span>TaskClient<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>taskPath<span class=\"token punctuation\">,</span> <span class=\"token parameter\">client</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>This does a few things if we look at this class implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RpcConnectionHandler</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span><span class=\"token operator\">></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConnectionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">readonly</span> path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">targetFactory</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">proxy<span class=\"token operator\">:</span> RpcProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">readonly</span> factoryConstructor<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> RpcProxyFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> RpcProxyFactory\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Channel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">this<span class=\"token punctuation\">.</span>factoryConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">targetFactory</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We see that a websocket channel is created on the <code class=\"language-text\">taskPath</code> (\"/services/task\") by the extension of the <code class=\"language-text\">ConnectionHandler</code>.</p>\n<p>And let's look at what it does <code class=\"language-text\">onConnection</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> Channel<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">this<span class=\"token punctuation\">.</span>factoryConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">targetFactory</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's go over this line by line:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">       <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">this<span class=\"token punctuation\">.</span>factoryConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This creates a <code class=\"language-text\">ProxyFactory</code> on path \"services/task\".</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we create a proxy object from the factory, this will be used to call\nthe other end of the RPC channel using the <code class=\"language-text\">TaskClient</code> interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        factory<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">targetFactory</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will call the function we've passed in parameter so:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">       <span class=\"token parameter\">client</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> taskServer <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token operator\">&lt;</span>TaskServer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>TaskServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            taskServer<span class=\"token punctuation\">.</span><span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> taskServer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This sets the client on the <code class=\"language-text\">taskServer</code>, in this case this is used to\nrun asynchronous tasks (e.g. a terminal command) in the backend.</p>\n<p>And it returns the <code class=\"language-text\">taskServer</code> as the object that will be exposed over RPC.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> factory<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This connects the factory to the channel and establishes the RPC protocol.</p>\n<h2 id=\"connecting-to-a-service\" style=\"position:relative;\"><a href=\"#connecting-to-a-service\" aria-label=\"connecting to a service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting to a service</h2>\n<p>So now that we have a backend service let's see how to connect to it from\nthe frontend.</p>\n<p>To do that you will need something like this:</p>\n<p>(From <code class=\"language-text\">task-frontend-module</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ContainerModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/shared/inversify'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> WebSocketConnectionProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/lib/browser/messaging'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TaskServer<span class=\"token punctuation\">,</span> taskPath <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/task-protocol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TaskWatcher <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/task-watcher'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bind</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>TaskServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>WebSocketConnectionProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> taskWatcher <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>TaskWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">.</span>createProxy<span class=\"token operator\">&lt;</span>TaskServer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>taskPath<span class=\"token punctuation\">,</span> taskWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getTaskClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The important bit here are those lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>TaskServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>WebSocketConnectionProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> taskWatcher <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>TaskWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">.</span>createProxy<span class=\"token operator\">&lt;</span>TaskServer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>taskPath<span class=\"token punctuation\">,</span> taskWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getTaskClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's go line by line:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>WebSocketConnectionProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we're getting the websocket connection, this will be used to create a proxy from.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        <span class=\"token keyword\">const</span> taskWatcher <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>TaskWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we're creating a watcher, this is used to get notified about events\nfrom the backend by using the <code class=\"language-text\">taskWatcher</code>'s client\n(<code class=\"language-text\">taskWatcher.getTaskClient()</code>)</p>\n<p>See more information about how events work in theia <a href=\"/theia-website-previews/pr-previews/pr-578/docs/events#events\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">.</span>createProxy<span class=\"token operator\">&lt;</span>TaskServer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>taskPath<span class=\"token punctuation\">,</span> taskWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getTaskClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As the second argument, we pass a local object to handle RPC messages from the remote object.\nSometimes the local object depends on the proxy and cannot be instantiated before the proxy is instantiated.\nIn such cases, the proxy interface should implement <code class=\"language-text\">RpcServer</code> and the local object should be provided as a client.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> RpcServer<span class=\"token operator\">&lt;</span>Client<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Disposable <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * If this server is a proxy to a remote server then\n     * a client is used as a local object\n     * to handle RPC messages from the remote server.\n     */</span>\n    <span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token operator\">:</span> Client <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    getClient<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Client <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TaskServer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RpcServer</span><span class=\"token operator\">&lt;</span>TaskClient<span class=\"token operator\">></span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> serverProxy <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>createProxy<span class=\"token operator\">&lt;</span>TaskServer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/services/task\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> taskWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getTaskClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserverProxy<span class=\"token punctuation\">.</span><span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So here at the last line we're binding the <code class=\"language-text\">TaskServer</code> interface to a\nRPC proxy.</p>\n<p>Note that his under the hood calls:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  createProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> arg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RpcProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> arg <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RpcProxyFactory</span> <span class=\"token operator\">?</span> arg <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RpcProxyFactory</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path<span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">onConnection</span><span class=\"token operator\">:</span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So it's very similar to the backend example.</p>\n<p>Maybe you've noticed too but as far as the connection is concerned the frontend\nis the server and the backend is the client. But that doesn't really\nmatter in our logic.</p>\n<p>So again there's multiple things going on here what this does is that:</p>\n<ul>\n<li>it creates a JsonRpc Proxy on path \"services/task\".</li>\n<li>it exposes the <code class=\"language-text\">taskWatcher.getTaskClient()</code> object.</li>\n<li>it returns a proxy of type <code class=\"language-text\">TaskServer</code>.</li>\n</ul>\n<p>So now instances of <code class=\"language-text\">TaskServer</code> are proxied over RPC to the\nbackend's <code class=\"language-text\">TaskServer</code> object.</p>\n<h2 id=\"complete-example\" style=\"position:relative;\"><a href=\"#complete-example\" aria-label=\"complete example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complete example</h2>\n<p>If you wish to see the complete implementation of what I referred too in\nthis documentation see <a href=\"https://github.com/eclipse-theia/theia/commit/99d191f19bd2a3e93098470ca1bb7b320ab344a1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this commit</a>.</p>","fields":{"slug":"json_rpc"}}},"pageContext":{"slug":"json_rpc"}}}